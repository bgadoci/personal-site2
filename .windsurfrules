# 🧠 App Overview – Markdown + Mongo Content Platform

## Purpose
Build a content platform using flat-file markdown for writing and MongoDB for metadata, organization, and dynamic tools. The goal is to keep writing and publishing simple while allowing database-driven features and app extensions.

---

## 🏗️ Tech Stack

- **Frontend**: Next.js (App Router)  
- **Styling**: Tailwind CSS  
- **Database**: MongoDB Atlas  
- **Deployment**: Heroku  
- **Markdown Parsing**: `gray-matter`, `remark`, or `contentlayer`  

---

## 📁 Content Structure

Markdown content lives in the `/content` directory and is organized by category:

```
/content
  /blog
    post-1.md
  /research
    paper.md
  /book
    chapter-1.md
```

Each markdown file includes frontmatter like this:

```yaml
---
title: "AI and the Soul"
slug: "ai-and-the-soul"
category: "research"
tags: ["AI", "ethics", "philosophy"]
date: "2025-03-26"
---
Markdown content goes here...
```

---

## 🧾 MongoDB Usage

### `posts` Collection (stores metadata only):

```json
{
  "title": "AI and the Soul",
  "slug": "ai-and-the-soul",
  "category": "research",
  "tags": ["AI", "ethics", "philosophy"],
  "path": "/content/research/ai-and-the-soul.md",
  "date": "2025-03-26"
}
```

### `tags` Collection (optional for tag filtering UI):

```json
{
  "name": "AI",
  "slug": "ai",
  "description": "Artificial Intelligence and related ideas"
}
```

---

## 🔧 Features

- List content by category (e.g., `/blog`, `/research`, `/book`)  
- View individual posts with full markdown rendering  
- Tag system with tag-based filtering and discovery  
- Search across all posts by title, tags, category, or date  
- Easy expansion for dynamic tools that require database access  

---

## 🌐 Deployment

- Deploy on Heroku  
- Connect to MongoDB Atlas  
- Use environment variables for DB credentials and secrets  

---

# 🎨 Design Principles

## 1. Simplicity

- Focus on essential features and content  
- Eliminate unnecessary elements  
- Use clear, concise language  
- Maintain visual hierarchy  

## 2. Consistency

- Use consistent patterns, colors, and interactions  
- Maintain uniform spacing and alignment  
- Follow established design patterns  
- Ensure predictable behavior  

## 3. Accessibility

- Follow WCAG 2.1 AA standards  
- Ensure sufficient color contrast (minimum 4.5:1)  
- Support keyboard navigation  
- Provide text alternatives for non-text content  
- Design for screen readers  

## 4. Responsiveness

- Design for all device sizes (mobile, tablet, desktop)  
- Use fluid layouts and flexible grids  
- Prioritize content on smaller screens  
- Test on various devices and screen sizes  

---

# 🎨 Color Palette

## Primary Colors (Emerald)

- Primary: `#10B981` (Emerald 500)  
- Primary Hover: `#059669` (Emerald 600)  
- Primary Light: `#ECFDF5` (Emerald 50)  

## Neutral Colors (Slate)

- Text (Dark): `#0F172A` (Slate 900)  
- Text (Light): `#64748B` (Slate 500)  
- Background: `#F8FAFC` (Slate 50)  
- White: `#FFFFFF`  

## Semantic Colors

- Success: `#10B981` (Green 500)  
- Warning: `#F59E0B` (Amber 500)  
- Error: `#EF4444` (Red 500)  
- Info: `#3B82F6` (Blue 500)  

---

# 🔠 Typography

## Font Family

- Primary Font: Inter (Sans-serif)  
- Fallback: System UI, -apple-system, sans-serif  

## Font Sizes

- Heading 1: 2.25rem (36px)  
- Heading 2: 1.875rem (30px)  
- Heading 3: 1.5rem (24px)  
- Heading 4: 1.25rem (20px)  
- Body: 1rem (16px)  
- Small: 0.875rem (14px)  
- Extra Small: 0.75rem (12px)  

## Font Weights

- Regular: 400  
- Medium: 500  
- Semibold: 600  
- Bold: 700  

---

# 📏 Spacing System

4-point system (`0.25rem = 4px`):

- xs: 0.25rem (4px)  
- sm: 0.5rem (8px)  
- md: 1rem (16px)  
- lg: 1.5rem (24px)  
- xl: 2rem (32px)  
- 2xl: 3rem (48px)  
- 3xl: 4rem (64px)  

---

# 🧩 Component Guidelines

## Buttons

### Primary Button

- Background: Primary color (`emerald-500`)  
- Text: White  
- Hover: Primary Hover (`emerald-600`)  
- Border Radius: 0.375rem (6px)  
- Padding: 0.5rem 1rem (8px 16px)  

### Secondary Button

- Background: White  
- Text: Primary color  
- Border: 1px solid Primary color  
- Hover: Primary Light (`emerald-50`)  
- Border Radius: 0.375rem (6px)  
- Padding: 0.5rem 1rem (8px 16px)  

### Tertiary Button

- Background: Transparent  
- Text: Primary color  
- Hover: Primary Light (`emerald-50`)  
- Padding: 0.5rem 1rem (8px 16px)  

## Form Elements

### Text Input

- Border: 1px solid `slate-300`  
- Border Radius: 0.375rem (6px)  
- Focus: Emerald ring  
- Padding: 0.5rem 0.75rem (8px 12px)  
- Height: 2.5rem (40px)  

### Select

- Same as Text Input  
- Include dropdown icon  

### Checkbox and Radio

- Checked: Emerald color  

## Cards

- Background: White  
- Border Radius: 0.5rem (8px)  
- Shadow: `sm`  
- Padding: 1.5rem (24px)  

## Tables

- Header Background: `slate-50`  
- Border: 1px solid `slate-200`  
- Row Hover: `slate-50`  
- Padding: 0.75rem 1rem (12px 16px)  

## Navigation

- Active Item: Primary color  
- Hover: `slate-100`  
- Text: `slate-700`  
- Active Text: Primary color  

---

# 🖼️ Icons

- Use Heroicons  
- Maintain consistent sizing  
- Ensure semantic meaning  

---

# 📱 Responsive Breakpoints

- sm: 640px  
- md: 768px  
- lg: 1024px  
- xl: 1280px  
- 2xl: 1536px  

---

# 🌀 Animation and Transitions

- Subtle, purposeful animations  
- Duration: 150–300ms  
- Avoid animations that induce motion sickness  

---

# 🌙 Dark Mode Support

## Text Input (Dark Mode)

- Background: `slate-700`  
- Border: `slate-600`  
- Text: White  
- Focus: Emerald 500 border/ring  
- Padding: 0.5rem 0.75rem  
- Radius: 0.375rem  

## Checkbox & Radio (Dark Mode)

- Checked: `emerald-400`  
- Border: `slate-600`  
- Focus Ring: `emerald-500` w/ opacity  

---

# ⚙️ Implementation with Tailwind CSS

- Use Tailwind utility classes  
- Respect this system's colors and spacing  
- Use `@apply` for shared component styles  

---

# ♿ Accessibility Checklist

- Keyboard access for all elements  
- Logical tab order  
- Color contrast meets 4.5:1  
- Text alternatives for non-text content  
- Zoom and text resizing support  

---

# 🔗 Resources

- [Tailwind CSS Docs](https://tailwindcss.com/docs)  
- [WCAG 2.1 Guidelines](https://www.w3.org/TR/WCAG21/)  
- [Heroicons](https://heroicons.com/)  
- [Inter Font](https://rsms.me/inter/)


# Voice and tone for writing book and blog content: 

1. Voice & Tone
Conversational and Approachable: Write as if you’re speaking directly to the reader. Use a friendly, helpful tone that’s upbeat and forward-looking.
Personal and Authentic: Use first-person (“I” statements) to share personal experiences, insights, and background. Let your enthusiasm and pride in your work show.
Encouraging and Supportive: Offer reassurance and invite feedback. Show genuine interest in helping or guiding the reader.
2. Structure & Organization
Use Clear Section Headings: Break your post into well-labeled sections or subheadings, often using Title Case. Make it easy for readers to navigate.
Open with Context: Begin with a short introduction that sets the stage for what you built or learned. Summarize the main topic or goal of the post.
Explain the “Why,” “How,” and “What”:
Why: Explain your motivation or the problem you’re solving.
How: Provide a brief overview of the process or steps taken.
What: Describe the final outcome, features, or insights.
End with Next Steps or a Call to Action: Encourage readers to try out the tool, leave feedback, or follow up with you.
3. Paragraphing & Formatting
Short Paragraphs: Keep paragraphs concise for readability. One to three sentences per paragraph is common in your style.
Lists & Bullet Points: Use bullet points or numbered lists when outlining features, steps, or key takeaways.
Parenthetical Asides: Use parentheses to add humor, clarify, or give disclaimers (e.g., “please consult a real lawyer”).
4. Language & Grammar
Straightforward and Clear: Write in plain language without unnecessary jargon. If technical terms are used, briefly explain them.
Active Voice: Favor direct, active constructions (“I designed,” “I built,” “I tested,” rather than passive forms).
Positive, Energetic Adjectives: Words like “awesome,” “amazing,” “proud,” or “excited” reflect your genuine enthusiasm.
5. Perspective & Tense
First-Person Singular: Use “I” for personal storytelling and reflection (e.g., “I decided,” “I worked on,” “I’m proud of…”).
Occasional Second-Person Direct Address: Speak to the reader as “you” to make the advice or call to action more engaging.
Present Tense & Simple Past: Mix present tense for general truths (“It’s easy to use”) with simple past for completed actions (“I built,” “I learned”).
6. Examples & Storytelling
Personal Examples: Weave in short anecdotes about your background, professional journey, or lessons learned (“My Journey,” “I have an odd background…”).
Anecdotal Style: Use narrative to illustrate points before explaining the larger concept or outcome.
7. Technical & Professional Details
Project Descriptions: Describe core functionalities and tech stacks succinctly. If listing tools or features, bullet them for quick scanning.
Disclaimers Where Needed: If there’s legal or professional risk, mention disclaimers or limits to your tool’s capabilities (e.g., “please still consult a real lawyer”).
8. Invitation & Engagement
Encourage Feedback and Interaction: Explicitly ask readers to try your product, share thoughts, or suggest improvements.
Highlight Future Plans: Indicate that more features or updates are in the pipeline, showing openness to growth and iteration.